# -*- coding: utf-8 -*-
"""blood

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N2QnVoVsGgDG-GT4vkdLG2LyDi3wnJ4O
"""

# bloodline_ai_realtime.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime, timedelta
from sklearn.ensemble import RandomForestRegressor

# =======================
# Page Config
# =======================
st.set_page_config(
    page_title="BloodLine AI - Real-Time AI Dashboard",
    page_icon="ü©∏",
    layout="wide"
)

# =======================
# Custom CSS & Animation
# =======================
st.markdown("""
<style>
body {
    background: linear-gradient(-45deg, #ff6b6b, #feca57, #48dbfb, #1dd1a1);
    background-size: 400% 400%;
    animation: gradientBG 15s ease infinite;
    color: #fff;
}
@keyframes gradientBG {0%{background-position:0% 50%;}50%{background-position:100% 50%;}100%{background-position:0% 50%;}}
.card {background-color: rgba(0,0,0,0.5); padding:20px; border-radius:15px; margin:10px; box-shadow:0px 0px 20px rgba(0,0,0,0.3);}
.alert-counter {display:inline-block; margin:10px; padding:10px 15px; background:red; border-radius:50%; animation:pulse 1s infinite; font-weight:bold; color:white;}
@keyframes pulse {0%{ transform: scale(1);}50%{ transform: scale(1.2);}100%{ transform: scale(1);}}
h2,h3{text-align:center;}
</style>
""", unsafe_allow_html=True)

# =======================
# Header
# =======================
st.markdown("<h1>ü©∏ BloodLine AI</h1>", unsafe_allow_html=True)
st.markdown("<h3>Real-Time Predictive Dashboard</h3>", unsafe_allow_html=True)

# =======================
# Sidebar Controls
# =======================
user_role = st.sidebar.selectbox(
    "Select User Role",
    ["Admin (Blood Bank)", "Hospital Staff", "Donor Manager"]
)
st.sidebar.markdown("---")
alert_threshold = st.sidebar.slider("Alert Threshold (Units)", 1, 50, 10)
selected_region = st.sidebar.selectbox("Select Region", ["North", "South", "East", "West", "Central"])

# =======================
# Simulated Data
# =======================
blood_types = ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
regions = ["North", "South", "East", "West", "Central"]
np.random.seed(42)

# Current inventory
inventory_region = {region: {btype: np.random.randint(5, 30) for btype in blood_types} for region in regions}

# Historical data (mock)
dates = [datetime.today() - timedelta(days=i) for i in range(30)]
historical_data = []
for region in regions:
    for btype in blood_types:
        for date in dates:
            historical_data.append([region, btype, date, np.random.randint(5, 25), np.random.randint(0,2), np.random.randint(0,2)])
hist_df = pd.DataFrame(historical_data, columns=["Region","BloodType","Date","UnitsDemand","Holiday","BadWeather"])

# =======================
# Real-Time Feature Simulation
# =======================
# Mock today's weather and event
weather_today = {"North":0,"South":1,"East":0,"West":1,"Central":0}  # 1=Bad weather
holiday_today = {"North":0,"South":0,"East":1,"West":0,"Central":0} # 1=Holiday

# =======================
# ML Prediction (RandomForest)
# =======================
def predict_demand(region):
    df = hist_df[hist_df["Region"]==region].copy()
    df["Day"] = df["Date"].dt.dayofweek
    X = df[["Day","Holiday","BadWeather"]]
    y = df["UnitsDemand"]
    model = RandomForestRegressor(n_estimators=50, random_state=42)
    model.fit(X,y)

    # Predict next 7 days
    future_dates = [datetime.today() + timedelta(days=i) for i in range(7)]
    X_future = pd.DataFrame({
        "Day":[d.dayofweek for d in future_dates],
        "Holiday":[holiday_today[region]]*7,
        "BadWeather":[weather_today[region]]*7
    })
    predictions = {}
    for btype in blood_types:
        pred = model.predict(X_future) + np.random.randint(-2,3,7)  # simulate variance per blood type
        pred = [max(0,int(p)) for p in pred]
        predictions[btype] = pred
    return predictions, future_dates

predicted_demand, future_dates = predict_demand(selected_region)

# =======================
# Dashboard: Inventory
# =======================
st.markdown("<div class='card'>", unsafe_allow_html=True)
st.subheader(f"Current Inventory - {selected_region}")
inv_df = pd.DataFrame.from_dict(inventory_region[selected_region], orient='index', columns=['Units'])
st.table(inv_df)
st.markdown("</div>", unsafe_allow_html=True)

# =======================
# Dashboard: Predicted Demand
# =======================
st.markdown("<div class='card'>", unsafe_allow_html=True)
st.subheader(f"Predicted Demand - {selected_region} (Next 7 Days)")
pred_df = pd.DataFrame(predicted_demand, index=[d.strftime("%d-%b") for d in future_dates])
fig = px.line(pred_df, x=pred_df.index, y=pred_df.columns, markers=True)
st.plotly_chart(fig, use_container_width=True)
st.markdown("</div>", unsafe_allow_html=True)

# =======================
# Shortage Alerts
# =======================
st.markdown("<div class='card'>", unsafe_allow_html=True)
st.subheader(f"Predicted Shortage Alerts - {selected_region}")
alerts = {btype: min(predicted_demand[btype]) < alert_threshold for btype in blood_types}
for btype, alert in alerts.items():
    if alert:
        st.markdown(f"<div class='alert-counter'>‚ö†Ô∏è {btype}</div>", unsafe_allow_html=True)
    else:
        st.markdown(f"<div style='display:inline-block;margin:5px;padding:8px;background:green;border-radius:10px;'>{btype} ‚úÖ</div>", unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)

# =======================
# Region-wise Demand Heatmap
# =======================
st.markdown("<div class='card'>", unsafe_allow_html=True)
st.subheader("Region-wise Blood Demand Heatmap")
region_demand = {}
for region in regions:
    pred, _ = predict_demand(region)
    region_demand[region] = sum(min(pred[btype]) for btype in blood_types)
map_df = pd.DataFrame({
    "Region": list(region_demand.keys()),
    "Predicted Shortage Units": list(region_demand.values()),
    "lat": [28, 13, 23, 19, 22],
    "lon": [77, 78, 87, 75, 78]
})
fig_map = px.scatter_mapbox(
    map_df,
    lat="lat",
    lon="lon",
    size="Predicted Shortage Units",
    color="Predicted Shortage Units",
    hover_name="Region",
    color_continuous_scale=px.colors.sequential.Reds,
    size_max=50,
    zoom=3
)
fig_map.update_layout(mapbox_style="open-street-map", margin={"r":0,"t":0,"l":0,"b":0})
st.plotly_chart(fig_map, use_container_width=True)
st.markdown("</div>", unsafe_allow_html=True)

# =======================
# Donor Engagement
# =======================
st.markdown("<div class='card'>", unsafe_allow_html=True)
st.subheader(f"Simulated Donor Engagement - {selected_region}")
if st.button(f"Send Donor Alerts to {selected_region}"):
    st.success(f"üì© Donor notifications sent to matching donors in {selected_region}!")
    st.balloons()
st.markdown("</div>", unsafe_allow_html=True)

# =======================
# Footer
# =======================
st.markdown("<p style='text-align:center; color:#fff;'>BloodLine AI - Real-Time AI Hackathon Prototype ü©∏</p>", unsafe_allow_html=True)